{"version":3,"sources":["let.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,iBAAiB,YAAY;AAC/B,WAAS,aAAT,CAAuB,GAAvB,EAA4B,CAA5B,EAA+B;AAC7B,QAAI,OAAO,EAAX,CAAc,IAAI,KAAK,IAAT,CAAc,IAAI,KAAK,KAAT,CAAe,IAAI,KAAK,SAAT,CAAmB,IAAI;AAChE,WAAK,IAAI,KAAK,IAAI,OAAO,QAAX,GAAT,EAAiC,EAAtC,EAA0C,EAAE,KAAK,CAAC,KAAK,GAAG,IAAH,EAAN,EAAiB,IAAxB,CAA1C,EAAyE,KAAK,IAA9E,EAAoF;AAClF,aAAK,IAAL,CAAU,GAAG,KAAb,EAAoB,IAAI,KAAK,KAAK,MAAL,KAAgB,CAAzB,EAA4B;AACjD;AACF,KAJ6D,CAI5D,OAAO,GAAP,EAAY;AACZ,WAAK,IAAL,CAAU,KAAK,GAAL;AACX,KAN6D,SAMpD;AACR,UAAI;AACF,YAAI,CAAC,EAAD,IAAO,GAAG,QAAH,CAAX,EAAyB,GAAG,QAAH;AAC1B,OAFD,SAEU;AACR,YAAI,EAAJ,EAAQ,MAAM,EAAN;AACT;AACF,YAAO,IAAP;AACF,UAAO,UAAU,GAAV,EAAe,CAAf,EAAkB;AACxB,QAAI,MAAM,OAAN,CAAc,GAAd,CAAJ,EAAwB;AACtB,aAAO,GAAP;AACD,KAFD,MAEO,IAAI,OAAO,QAAP,IAAmB,OAAO,GAAP,CAAvB,EAAoC;AACzC,aAAO,cAAc,GAAd,EAAmB,CAAnB,CAAP;AACD,KAFM,MAEA;AACL,YAAM,IAAI,SAAJ,CAAc,sDAAd,CAAN;AACD;AACF,GARA;AASF,CAxBoB,EAArB;;AA0BA,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACrB,SAAO,MAAM,OAAN,CAAc,GAAd,IAAqB,GAArB,GAA2B,MAAM,IAAN,CAAW,GAAX,CAAlC;AACD;;AAED,IAAI,MAAM,IAAI,GAAJ,GAAU,GAAV,CAAc,GAAd,EAAmB,GAAnB,CAAuB,GAAvB,EAA4B,GAA5B,CAAgC,GAAhC,CAAV;;AAEA,IAAI,OAAO,eAAe,GAAf,EAAoB,CAApB,CAAX;;AAEA,IAAI,IAAI,KAAK,CAAL,CAAR;AACA,IAAI,IAAI,KAAK,CAAL,CAAR;;;AAGA,IAAI,QAAQ,SAAS,GAAT,CAAZ;;AAEA,IAAI,QAAQ,MAAM,CAAN,CAAZ;;AAEA,IAAI,OAAO,MAAM,KAAN,CAAY,CAAZ,CAAX","file":"let.js","sourcesContent":["'use strict';\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;_e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }return _arr;\n  }return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction _toArray(arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n}\n\nlet set = new Set().add('a').add('b').add('c');\n\nvar _set = _slicedToArray(set, 2);\n\nlet x = _set[0];\nlet y = _set[1];\n// x='a'; y='b'\n\nvar _set2 = _toArray(set);\n\nlet first = _set2[0];\n\nlet rest = _set2.slice(1);\n// first='a'; rest=['b','c'];\n\n//# sourceMappingURL=let.js.map\n\n//# sourceMappingURL=let.js.map\n\n//# sourceMappingURL=let.js.map\n\n//# sourceMappingURL=let.js.map"]}